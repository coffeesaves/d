codes
#strassens
#include <stdio.h>
#include <stdlib.h>


// Function to allocate memory for a matrix
int** allocMat(int n) {
    int **m = (int **)malloc(n * sizeof(int *));
    for (int i = 0; i < n; i++)
        m[i] = (int *)malloc(n * sizeof(int));
    return m;
}


// Function to free memory allocated for a matrix
void freeMat(int **m, int n) {
    for (int i = 0; i < n; i++)
        free(m[i]);
    free(m);
}


// Function to add two matrices
void addMats(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] + B[i][j];
}


// Function to subtract two matrices
void subMats(int **A, int **B, int **C, int n) {
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            C[i][j] = A[i][j] - B[i][j];
}


// Function to multiply two matrices using Strassen's algorithm
void strassenMult(int **A, int **B, int **C, int n) {
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }


    // Creating submatrices
    int **A11, **A12, **A21, **A22;
    int **B11, **B12, **B21, **B22;
    int **C11, **C12, **C21, **C22;
    int **P1, **P2, **P3, **P4, **P5, **P6, **P7;
    int **t1, **t2;


    int sz = n / 2;
    A11 = allocMat(sz);
    A12 = allocMat(sz);
    A21 = allocMat(sz);
    A22 = allocMat(sz);
    B11 = allocMat(sz);
    B12 = allocMat(sz);
    B21 = allocMat(sz);
    B22 = allocMat(sz);
    C11 = allocMat(sz);
    C12 = allocMat(sz);
    C21 = allocMat(sz);
    C22 = allocMat(sz);
    P1 = allocMat(sz);
    P2 = allocMat(sz);
    P3 = allocMat(sz);
    P4 = allocMat(sz);
    P5 = allocMat(sz);
    P6 = allocMat(sz);
    P7 = allocMat(sz);
    t1 = allocMat(sz);
    t2 = allocMat(sz);


    // Splitting matrices
    for (int i = 0; i < sz; i++) {
        for (int j = 0; j < sz; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + sz];
            A21[i][j] = A[i + sz][j];
            A22[i][j] = A[i + sz][j + sz];


            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + sz];
            B21[i][j] = B[i + sz][j];
            B22[i][j] = B[i + sz][j + sz];
        }
    }


    // Calculating products
    addMats(A11, A22, t1, sz);
    addMats(B11, B22, t2, sz);
    strassenMult(t1, t2, P1, sz);


    addMats(A21, A22, t1, sz);
    strassenMult(t1, B11, P2, sz);


    subMats(B12, B22, t1, sz);
    strassenMult(A11, t1, P3, sz);


    subMats(B21, B11, t1, sz);
    strassenMult(A22, t1, P4, sz);


    addMats(A11, A12, t1, sz);
    strassenMult(t1, B22, P5, sz);


    subMats(A21, A11, t1, sz);
    addMats(B11, B12, t2, sz);
    strassenMult(t1, t2, P6, sz);


    subMats(A12, A22, t1, sz);
    addMats(B21, B22, t2, sz);
    strassenMult(t1, t2, P7, sz);


    // Calculating result submatrices
    addMats(P1, P4, t1, sz);
    subMats(t1, P5, t2, sz);
    addMats(t2, P7, C11, sz);


    addMats(P3, P5, C12, sz);


    addMats(P2, P4, C21, sz);


    subMats(P1, P2, t1, sz);
    addMats(t1, P3, t2, sz);
    addMats(t2, P6, C22, sz);


    // Combining result submatrices into C
    for (int i = 0; i < sz; i++) {
        for (int j = 0; j < sz; j++) {
            C[i][j] = C11[i][j];
            C[i][j + sz] = C12[i][j];
            C[i + sz][j] = C21[i][j];
            C[i + sz][j + sz] = C22[i][j];
        }
    }


    // Freeing memory
    freeMat(A11, sz);
    freeMat(A12, sz);
    freeMat(A21, sz);
    freeMat(A22, sz);
    freeMat(B11, sz);
    freeMat(B12, sz);
    freeMat(B21, sz);
    freeMat(B22, sz);
    freeMat(C11, sz);
    freeMat(C12, sz);
    freeMat(C21, sz);
    freeMat(C22, sz);
    freeMat(P1, sz);
    freeMat(P2, sz);
    freeMat(P3, sz);
    freeMat(P4, sz);
    freeMat(P5, sz);
    freeMat(P6, sz);
    freeMat(P7, sz);
    freeMat(t1, sz);
    freeMat(t2, sz);
}


// Function to print a matrix
void printMat(int **m, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d ", m[i][j]);
        }
        printf("\n");
    }
}


// Function to take user input for a matrix
void inputMat(int **m, int n) {
    printf("Enter the elements of the matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("Enter element [%d][%d]: ", i, j);
            scanf("%d", &m[i][j]);
        }
    }
}


int main() {
    int n;
    printf("Enter the size of the square matrices: ");
    scanf("%d", &n);


    // Allocate memory for matrices
    int **A = allocMat(n);
    int **B = allocMat(n);
    int **C = allocMat(n);


    // Input matrices
    printf("Matrix A:\n");
    inputMat(A, n);
    printf("Matrix B:\n");
    inputMat(B, n);


    // Multiply matrices
    strassenMult(A, B, C, n);


    // Print result
    printf("Resultant Matrix:\n");
    printMat(C, n);


    // Free allocated memory
    freeMat(A, n);
    freeMat(B, n);
    freeMat(C, n);


    return 0;
}






—----------------------------------------------------------------------—-----------------------------------------------
#prims 


#include <stdio.h>
#include <stdbool.h>


#define MAX_NODES 10
#define INF 999


int cost[MAX_NODES][MAX_NODES];
int n;


void prim(int graph[MAX_NODES][MAX_NODES]) {
    int parent[MAX_NODES];
    int key[MAX_NODES];
    bool mstSet[MAX_NODES];
    int totalCost = 0; // Variable to store the total cost of the MST


    for (int i = 0; i < n; i++) {
        key[i] = INF;
        mstSet[i] = false;
    }


    key[0] = 0;     
    parent[0] = -1; 


    //for all vertices, finding minimum and storing in ans


    for (int count = 0; count < n - 1; count++) {


        //finding minimum cost 


        int u = -1;
        for (int v = 0; v < n; v++) {
            if (!mstSet[v] && (u == -1 || key[v] < key[u])) {
                u = v;
            }
        }


        mstSet[u] = true;


        //drawing graph


        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }


    printf("Edge   Weight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d    %d \n", parent[i]+1, i+1, graph[i][parent[i]]);
        totalCost += graph[i][parent[i]]; // Add the weight of each edge to totalCost
    }
    printf("Total Cost of MST: %d\n", totalCost); // Print the total cost of the MST
}


int main() {
    printf("Enter the number of nodes: ");
    scanf("%d", &n);


    printf("Enter the cost adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &cost[i][j]);
        }
    }


    printf("\nPrim's Algorithm:\n");
    prim(cost);


    return 0;
}




—----------------------------------------------------------------------—-----------------------------------------------




#krushals 


#include<stdio.h>
#include<stdlib.h>


#define MAX_NODES 10


int cost[MAX_NODES][MAX_NODES];
int n;


// Function prototypes for Kruskal's algorithm
void kruskal();
int find(int parent[], int i);
void unionn(int parent[], int x, int y);


int main() {
    int i, j;
 
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    printf("Enter the cost adjacency matrix:\n");
    for(i = 1; i <= n; i++) {
        for(j = 1; j <= n; j++) {
            scanf("%d", &cost[i][j]);
            if(cost[i][j] == 0)
                cost[i][j] = 999;
        }
    }


    printf("\nKruskal's Algorithm:\n");
    kruskal();
    
    return 0;
}


void kruskal() {
    int parent[MAX_NODES];
    int i, j, a, b, u, v;
    int ne = 1;
    int mincost = 0;


    // Initialize parent array
    for (i = 1; i <= n; i++)
        parent[i] = 0;


    while (ne < n) {
        int min = 999;
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    a = u = i;
                    b = v = j;
                }
            }
        }
        u = find(parent, u);
        v = find(parent, v);


        if (u != v) {
            printf("%d edge (%d,%d) =%d\n", ne++, a, b, min);
            mincost += min;
            unionn(parent, u, v);
        }
        cost[a][b] = cost[b][a] = 999;
    }
    printf("Kruskal's Minimum Spanning Tree:\n");
    printf("Total minimum cost: %d\n", mincost);
}


int find(int parent[], int i) {
    while (parent[i])
        i = parent[i];
    return i;
}


void unionn(int parent[], int x, int y) {
    int xset = find(parent, x);
    int yset = find(parent, y);
    parent[xset] = yset;
}




—----------------------------------------------------------------------—-----------------------------------------------
# Knapsack problem 


#include <stdio.h>


int value[20];
int weight[20];
float ratio[20];


int name[20];


int main()
{
    int num, max, i, j, temp;
    printf("ENTER NUMBER OF FRUITS:");
    scanf("%d", &num);
    printf("ENTER MAX CAPACITY:");
    scanf("%d", &max);


    for (i = 0; i < num; i++)
    {
        printf("ENTER THE NUTRIENT VALUE FOR FRUIT %d: ", i+1);
        scanf("%d", &value[i]);
        name[i]=i+1;
    }
    for (i = 0; i < num; i++)
    {
        printf("ENTER THE WEIGHT FOR FRUIT %d: ", i+1);
        scanf("%d", &weight[i]);
    }
    for (i = 0; i < num; i++)
    {
        ratio[i] = (float)value[i] / weight[i];
    }


    // Sorting fruits based on the ratio in descending order
    for (i = 0; i < num - 1; i++)
    {
        for (j = 0; j < num - i - 1; j++)
        {
            if (ratio[j] < ratio[j + 1])
            {
                float tempRatio = ratio[j];
                ratio[j] = ratio[j + 1];
                ratio[j + 1] = tempRatio;


                int tempValue = value[j];
                value[j] = value[j + 1];
                value[j + 1] = tempValue;


                int tempWeight = weight[j];
                weight[j] = weight[j + 1];
                weight[j + 1] = tempWeight;


                int tempname = name[j];
                name[j] = name[j + 1];
                name[j + 1] = tempname;


            }
        }
    }


    printf("\nFRUIT VALUE   WEIGHT   RATIO\n");
    for (i = 0; i < num; i++)
    {
        printf("F%d     %d      %d      %.2f\n", name[i], value[i], weight[i], ratio[i]);
    }


    int currentWeight = 0;
    float totalValue = 0;


    for (i = 0; i < num; i++)
    {
        if (currentWeight + weight[i] <= max)
        {
            printf("Selected Fruit: F%d\n", name[i]);
            currentWeight += weight[i];
            totalValue += value[i];
        }
        else
        {
            float remainingWeight = max - currentWeight;
            float fraction = remainingWeight / weight[i];
            printf("Selected Fraction of Fruit: F%d (Fraction: %.2f)\n", name[i], fraction);
            totalValue += fraction * value[i];
            currentWeight = max; 
            break;
        }
    }


    printf("Total Value: %.2f\n", totalValue);
    printf("Total Weight: %d\n", currentWeight);


    return 0;
}


—----------------------------------------------------------------------—-----------------------------------------------
#Coin Change Problem using greedy algorithm.


#include <stdio.h> 


void minCoins(int coins[], int n, int amount) { 
    int i, minCoins = 0,count; 
    for (i = n - 1; i >= 0; i--) { 
        count = 0;
        while (amount >= coins[i]) {
            count++;
            minCoins++; 
            amount -= coins[i]; 
        } 
        printf("%d x $%d used\n", count, coins[i]);
    } 
   printf("Minimum number of coins required: %d\n", minCoins); 
} 


int main() { 
    int coins[10]; 
    int n, i, amount; 
    printf("Enter the number of coin denominations: "); 
    scanf("%d", &n); 
    printf("Enter the coin denominations:\n"); 
    for (i = 0; i < n; i++) { 
        scanf("%d", &coins[i]); 
    } 
    printf("Enter the amount: "); 
    scanf("%d", &amount);
    
    minCoins(coins, n, amount); 
    
    return 0; 
}


—----------------------------------------------------------------------—-----------------------------------------------
#Dijkstra’s algorithm using greedy algorithm.
#include <stdio.h>


int V;


int minDistance(int dist[], int sptSet[]) {
    int min = 999, min_index;
    for (int v = 0; v < V; v++)
        if (sptSet[v] == 0 && dist[v] <= min)
            min = dist[v], min_index = v;
    return min_index;
}


void printSolution(int dist[]) {
    printf("Vertex Distance from Source\n");
    for (int i = 0; i < V; i++)
        printf("%d \t\t %d\n", i, dist[i]);
}


void dijkstra(int graph[V][V], int src) {
    int dist[V]; // The output array. dist[i] will hold the shortest distance from src to i
    int sptSet[V]; // sptSet[i] will be true if vertex i is included in shortest path tree or shortest distance from src to i is finalized


    // Initialize all distances as INFINITE and sptSet[] as false
    for (int i = 0; i < V; i++)
        dist[i] = 999, sptSet[i] = 0;


    // Distance of source vertex from itself is always 0
    dist[src] = 0;


    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);


        // Mark the picked vertex as processed
        sptSet[u] = 1;


        // Update dist value of the adjacent vertices of the picked vertex
        for (int v = 0; v < V; v++)


            // Update dist[v] only if is not in sptSet, there is an edge from u to v, and total weight of
            //path from src to v through u is smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v] && dist[u] + graph[u][v] < dist[v])
                dist[v] = dist[u] + graph[u][v];
    }


    // Print the constructed distance array
    printSolution(dist);
}


int main() {
    printf("Enter the number of vertices: ");
    scanf("%d", &V);


    int graph[V][V];
    printf("Enter the adjacency matrix for the graph (%d x %d):\n", V, V);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }


    int src;
    printf("Enter the source vertex: ");
    scanf("%d", &src);


    dijkstra(graph, src);


    return 0;
}




—----------------------------------------------------------------------—-----------------------------------------------
#Matrix chain multiplication
#include <stdio.h>


void printParenthesis(int i, int j, int n, int bracket[][n])
{
    if (i == j)
    {
        printf("%c ", 'A' + i - 1);
        return;
    }


    printf("(");
    printParenthesis(i, bracket[i][j], n, bracket);
    printParenthesis(bracket[i][j] + 1, j, n, bracket);
    printf(")");
}


void matrixChainOrder(int arr[], int n)
{
    int minMul[n][n];
    int bracket[n][n];


    for (int i = 1; i < n; i++)
        minMul[i][i] = 0;


    for (int L = 2; L < n; L++)
    {
        for (int i = 1; i < n - L + 1; i++)
        {
            int j = i + L - 1;
            minMul[i][j] = 99999999;


            for (int k = i; k <= j - 1; k++)
            {
                int q = minMul[i][k] + minMul[k + 1][j] + arr[i - 1] * arr[k] * arr[j];


                if (q < minMul[i][j])
                {
                    minMul[i][j] = q;
                    bracket[i][j] = k;
                }
            }
        }
    }


    printf("Pyramid based on MinMul Matrix in the optimal substructure:\n");


    // Print pyramid based on minMul matrix values
    for (int i = 1; i < n; i++)
    {
        // Print spaces
        for (int space = 1; space <= n - i; ++space)
        {
            printf(" ");
        }


        // Print values
        for (int j = 1; j < n; j++)
        {
            if (j >= i)
            {
                printf("%d ", minMul[i][j]);
            }
            else
            {
                printf(" ");
            }
        }


        printf("\n");
    }


    printf("Minimum number of multiplications required for matrix multiplication: %d\n", minMul[1][n - 1]);


    printf("Optimal Parenthesization: ");
    printParenthesis(1, n - 1, n, bracket);
    printf("\n");
}


int main()
{
    int n;
    int arr[10];


    printf("Enter the size of the array:\n ");
    scanf("%d", &n);


    printf("Enter the dimensions of %d matrices:\n ", n);
    for (int i = 0; i < n; i++)
    {
        scanf("%d", &arr[i]);
    }


    printf("The elements are:\n");
    for (int i = 0; i < n; i++)
    {
        printf("%d\n", arr[i]);
    }


    printf("\n");


    matrixChainOrder(arr, n);


    return 0;
}
   


—----------------------------------------------------------------------—-----------------------------------------------
# Coin Change Problem using dynamic programming.


#include<stdio.h>
#include<stdlib.h>


#define INF 999999


int makeChange(int d[], int n, int amount, int coins[]) {
    int C[n + 1][amount + 1];


    
    for(int i = 0; i <= n; i++)
        C[i][0] = 0;


    for(int i = 1; i <= n; i++) {
        for(int j = 1; j <= amount; j++) {
            if (i == 1 && j < d[i - 1])
                C[i][j] = INF;
            else if (i == 1)
                C[i][j] = 1 + C[1][j - d[0]];
            else if (j < d[i - 1])
                C[i][j] = C[i - 1][j];
            else
                C[i][j] = (C[i - 1][j] < 1 + C[i][j - d[i - 1]]) ? C[i - 1][j] : 1 + C[i][j - d[i - 1]];
        }
    }


    int i = n, j = amount, numCoins = 0;
    while (j > 0) {
        if (C[i][j] == C[i - 1][j])
            i = i - 1;
        else {
            coins[numCoins++] = d[i - 1];
            j = j - d[i - 1];
        }
    }


    return C[n][amount];
}


int main() {
    int d[10];
    int n;
    printf("Enter number of denominations: ");
    scanf("%d", &n);


    int amount;
    printf("Enter amount: ");
    scanf("%d", &amount);


    printf("Enter denominations: ");
    for(int i = 0; i < n; i++) {
        scanf("%d", &d[i]);
    }


    int coins[amount], numCoins;
    numCoins = makeChange(d, n, amount, coins);


    printf("Minimum number of coins needed: %d\n", numCoins);
    printf("Combination of coins: ");
    for(int i = 0; i < numCoins; i++)
        printf("%d ", coins[i]);
    printf("\n");


    return 0;
}


—----------------------------------------------------------------------—-----------------------------------------------
#Travelling Salesman Problem using dynamic programming.


#include<stdio.h>
#define MAX_CITIES 20
#define INF 9999
int n, d[MAX_CITIES][MAX_CITIES],dp[1<<MAX_CITIES][MAX_CITIES],av;
int t(int v ,int p)
{
    if(v==av)return d[p][0];
    if(dp[v][p]!=-1)return dp[v][p];
    int a =INF;


    for(int c=0;c<n;c++)
    if(!(v&(1<<c)))
    {
        int nv=v | (1<<c),na=d[p][c]+t(nv,c);
        a=(a<na)?a:na;




    }
    return dp[v][p]=a;
}
int main()
{
  printf("ENTER THE NO OF CITIES:\n");
  scanf("%d",&n);


  printf("ENTER THE DISTANCES:\n");
  for(int i=0;i<n;i++)
  {
      for(int j=0;j<n;j++)
      {
        scanf("%d",&d[i][j]);
      }
  }






  for(int i=0;i<(1<<n);i++)
  {
      for(int j=0;j<n;j++)
      {
          dp[i][j]=-1;
          av=(1<<n)-1;
      }
  }
  printf("THE COST IS %d\n",t(1,0));
  return 0;
}
—----------------------------------------------------------------------—-----------------------------------------------
# (LCS) using dynamic programming.


#include <stdio.h>
#include <string.h>


void LCS(char s1[], char s2[], int m, int n)
{
    int i, j, table[21][21]; // Increase the size of the table to accommodate extra row and column for zeros


    // filling 0's in table, in string length + 1 places
    for (i = 0; i <= m; i++)
        table[i][0] = 0;
    for (i = 0; i <= n; i++)
        table[0][i] = 0;


    // creating the table in bottom-up way
    for (i = 1; i <= m; i++)
    {
        for (j = 1; j <= n; j++)
        {
            if (s1[i - 1] == s2[j - 1])
            {
                table[i][j] = table[i - 1][j - 1] + 1;
            }
            else if (table[i - 1][j] >= table[i][j - 1])
            {
                table[i][j] = table[i - 1][j];
            }
            else
            {
                table[i][j] = table[i][j - 1];
            }
        }
    }


    int index = table[m][n];   // last num is length of LCS
    char lcsString[index + 1]; // +1 for '\0' at the end
    lcsString[index] = '\0';


    i = m; // not m-1, n-1 as table has 1 extra row and column of zeros
    j = n;
    while (i > 0 && j > 0)
    {
        if (s1[i - 1] == s2[j - 1])
        {
            lcsString[index - 1] = s1[i - 1];
            i--;
            j--;
            index--;
        }


        else if (table[i - 1][j] > table[i][j - 1])
            i--;
        else
            j--;
    }


    // Printing the sub sequences
    printf("\nString 1 : %s \nString 2 : %s \n", s1, s2);
    printf("LCS: %s\n", lcsString);
}


int main()
{
    int m, n;
    char s1[21], s2[21]; // Increase size to accommodate '\n' and '\0'


    printf("Enter string 1: ");
    scanf("%s", s1);


    printf("Enter string 2: ");
    scanf("%s", s2);


    m = strlen(s1);
    n = strlen(s2);


    LCS(s1, s2, m, n);


    return 0;
}


—----------------------------------------------------------------------—-----------------------------------------------
#N-queen
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>


#define MAX_N 10


int total_solutions = 0;
int N;
int solutions[MAX_N][MAX_N];


// Check if placing a queen at position (row, col) is safe
bool isSafe(int row, int col, int board[]) {
    for (int i = 0; i < col; i++) {
        // Check if there is a queen in the same row or in diagonal positions
        if (board[i] == row || abs(board[i] - row) == abs(i - col)) {
            return false;
        }
    }
    return true;
}


// Solve N Queens problem using backtracking
void solveNQueens(int col, int board[]) {
    if (col == N) {
        // If all queens are placed successfully, store the solution
        for (int i = 0; i < N; i++) {
            solutions[total_solutions][i] = board[i];
        }
        total_solutions++;
        return;
    }


    // Try placing a queen in each row of the current column
    for (int i = 0; i < N; i++) {
        if (isSafe(i, col, board)) {
            board[col] = i;
            solveNQueens(col + 1, board);
        }
    }
}


// Print the chessboard for a single solution
void printSolution(int solution) {
    printf("Solution %d:\n", solution + 1);
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            if (solutions[solution][j] == i) {
                printf("Q ");
            } else {
                printf(". ");
            }
        }
        printf("\n");
    }
    printf("\n");
}


int main() {
    int num_queens;


    printf("Enter the number of queens (N): ");
    scanf("%d", &num_queens);


    if (num_queens < 1 || num_queens > MAX_N) {
        printf("Please enter a number between 1 and %d.\n", MAX_N);
        return 1;
    }


    N = num_queens;
    int board[MAX_N];


    total_solutions = 0;
    solveNQueens(0, board);


    printf("Total number of solutions for %d queens: %d\n", N, total_solutions);


    for (int i = 0; i < total_solutions; i++) {
        printSolution(i);
    }


    return 0;
}


—----------------------------------------------------------------------—-----------------------------------------------
# Sum of subsets 


—#include <stdio.h>
#define MAX_ELE 100


int n, t_sum;
int e[MAX_ELE];
int sub[MAX_ELE];


void printSub() {
    for (int i = 0; i < n; i++) {
        printf("%d ", sub[i]);
    }
    printf("\n");
}


void findSub(int cur_index, int cur_sum, int rem_sum) {
    if (cur_sum == t_sum) {
        printSub();
    } else if (cur_index < n) {
        sub[cur_index] = 1;
        if (cur_sum + e[cur_index] <= t_sum) {
            findSub(cur_index + 1, cur_sum + e[cur_index], rem_sum - e[cur_index]);
        }
        sub[cur_index] = 0;
        if (cur_sum + rem_sum - e[cur_index] >= t_sum) {
            findSub(cur_index + 1, cur_sum, rem_sum - e[cur_index]);
        }
    }
}


int main() {
    int total_sum = 0;


    printf("Number of elements: ");
    scanf("%d", &n);


    printf("Enter the elements: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &e[i]);
        total_sum += e[i];
        sub[i] = 0;
    }


    printf("Target sum: ");
    scanf("%d", &t_sum);


    findSub(0, 0, total_sum);
    
    return 0;
}
----------------------------------------------------------------------—--------------------------------------------------
# Job Scheduling
#include <stdio.h>
#include <stdlib.h>


#define MAX_JOBS 10


struct Job {
    int id;
    int deadline;
    int profit;
};


void sortByProfit(struct Job arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j].profit < arr[j + 1].profit) {
                // Swap arr[j] and arr[j+1]
                struct Job temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}


void jobScheduling(struct Job arr[], int n) {
    int maxDeadline = 0;
    for (int i = 0; i < n; i++) {
        if (arr[i].deadline > maxDeadline)
            maxDeadline = arr[i].deadline;
    }
    struct Job result[maxDeadline];
    for (int i = 0; i < maxDeadline; i++)
        result[i].id = -1;


    for (int i = 0; i < n; i++) {
        int j = arr[i].deadline - 1;
        while (j >= 0 && result[j].id != -1)
            j--;
        if (j >= 0)
            result[j] = arr[i];
    }


    int totalProfit = 0;
    printf("Scheduled Jobs:\n");
    for (int i = 0; i < maxDeadline; i++) {
        if (result[i].id != -1) {
            printf("Job ID: %d, Deadline: %d, Profit: %d\n", result[i].id, result[i].deadline, result[i].profit);
            totalProfit += result[i].profit;
        }
    }
    printf("Total Profit: %d\n", totalProfit);
}


int main() {
    int n;
    printf("Enter the number of jobs: ");
    scanf("%d", &n);
    struct Job arr[MAX_JOBS];
    printf("Enter job details (id, deadline, profit):\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %d %d", &arr[i].id, &arr[i].deadline, &arr[i].profit);
    }
    sortByProfit(arr, n);
    jobScheduling(arr, n);
    return 0;
}


—----------------------------------------------------------------------—-----------------------------------------------


# Knuth-Morris-Pratt a


#include <stdio.h>
#include <string.h>


void prefixSuffixArray(char pat[], int M, int pps[]) {
    int length = 0;
    pps[0] = 0;
    int i = 1;
    while (i < M) {
        if (pat[i] == pat[length]) {
            length++;
            pps[i] = length;
            i++;
        }
        else {
            if (length != 0)
                length = pps[length - 1];
            else {
                pps[i] = 0;
                i++;
            }
        }
    }
}


void KMPAlgorithm(char text[], char pattern[]) {
    int M = strlen(pattern);
    int N = strlen(text);
    int pps[M];
    prefixSuffixArray(pattern, M, pps);
    int i = 0;
    int j = 0;
    while (i < N) {
        if (pattern[j] == text[i]) {
            j++;
            i++;
        }
        if (j == M) {
            printf("Found pattern at index %d\n", i - j);
            return;
        }
        else if (i < N && pattern[j] != text[i]) {
            if (j != 0)
                j = pps[j - 1];
            else
                i = i + 1;
        }
    }
    printf("Pattern not found\n");
}


int main() {
    char text[100], pattern[100];
    
    printf("Enter the text: ");
    scanf("%s", text);


    printf("Enter the pattern: ");
    scanf("%s", pattern);


    KMPAlgorithm(text, pattern);
    return 0;
}


—----------------------------------------------------------------------—-----------------------------------------------


# Fifteen Puzzle
#include <stdio.h>


#define N 4 // Size of the puzzle (4x4 for the 15 puzzle)


typedef struct {
    int board[N][N], blankRow, blankCol;
} Puzzle;


void swap(int *a, int *b) { int temp = *a; *a = *b; *b = temp; }


void printPuzzle(Puzzle puzzle) {
    printf("Puzzle State:\n");
    for (int i = 0; i < N; i++, printf("\n"))
        for (int j = 0; j < N; j++) printf("%d%s", puzzle.board[i][j], j == N - 1 ? "" : " ");
}


Puzzle initializePuzzle() {
    Puzzle puzzle;
    printf("Enter the initial state of the puzzle (%dx%d):\n", N, N);
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++) {
            scanf("%d", &puzzle.board[i][j]);
            if (!puzzle.board[i][j]) puzzle.blankRow = i, puzzle.blankCol = j;
        }
    return puzzle;
}


Puzzle generateGoalState() {
    Puzzle goalPuzzle = { .blankRow = N - 1, .blankCol = N - 1 };
    for (int i = 0, value = 1; i < N; i++)
        for (int j = 0; j < N; j++) goalPuzzle.board[i][j] = (value++ % (N * N));
    goalPuzzle.board[N - 1][N - 1] = 0; // Blank tile represented by 0
    return goalPuzzle;
}


int main() {
    Puzzle initialPuzzle = initializePuzzle();
    printPuzzle(initialPuzzle);
    printf("\nGoal State:\n");
    printPuzzle(generateGoalState());
    return 0;
}